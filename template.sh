#!/bin/bash


# need to setup usage first for use in getopts
function usage {
	echo 
	echo script: $0
	echo -h help
	echo -o oracle home value
	echo -s oracle sid value
	echo -v verbose mode
	echo -d debug mode
	echo -b backup type $VALID_BACKUP_TYPES
	echo

}

# valid backup types
VALID_BACKUP_TYPES="arch|archclean|incr0|incr1"

# get command line options
# options followed by a colon require an argument

DEBUG=0; LOCAL_DEBUG=0
VERBOSE=0

[ -z "$*" ] && {
	echo no arguments supplied
	usage
	exit 5
}

while getopts o:s:b:dvh arg
do
	case $arg in
		o) export ORACLE_HOME=$OPTARG;;
		s) export ORACLE_SID=$OPTARG;;
		b) export BACKUP_TYPE=$OPTARG;;
		d) export LOCAL_DEBUG=1;;
		v) export VERBOSE=1;;
		h) usage;exit;;
		*) echo "invalid argument specified"; usage;exit 1;
	esac

done

# load the scripting functions
# do this following command line args so we have 
# ORACLE_HOME

export FUNCTIONS_FILE=$HOME/scripts/orafunctions.sh
. $FUNCTIONS_FILE

# setting DEBUG after calling the functions will avoid 
# debug output generated by the functions
# unless of course you want to see that
DEBUG=$LOCAL_DEBUG

#####################################
# setup the config directory
# even if called via symbolic link this will
# find the original source script so that 
# path to config file is correct
#####################################

CALLED_DIRNAME=$(getPath $0);
SCRIPT_FQN=$(getFilePath $0)
FQN_DIRNAME=$(getPath $SCRIPT_FQN)
SCRIPT_HOME=$(getRelPath $CALLED_DIRNAME $FQN_DIRNAME)
CONFIG_DIR=$SCRIPT_HOME/config
#echo CONFIG_DIR: $CONFIG_DIR

#####################################
# now load the config file
#####################################
CONFIGFILE=${CONFIG_DIR}/template.config

if [ -r "$CONFIGFILE" ]; then 
	. $CONFIGFILE
else
	echo "Unable to load config file $CONFIGFILE"
	exit 6
fi

#####################################
# show config values for test purpose
#####################################
echo Display config values for test
echo RMAN_LOGIN: $CFG_RMAN_LOGIN
echo AVAIL_LOGIN: $CFG_AVAIL_LOGIN
echo LOCKFILE: $CFG_LOCKFILE

#################################
# now test command line args
#################################

[ -d "$ORACLE_HOME" -o -n "$ORACLE_HOME" ] || {
	echo invalid or empty ORACLE_HOME specified
	usage
	exit 1
}

[ -z "$ORACLE_SID" ] && {
	echo empty ORACLE_SID specified
	usage
	exit 2
}

[ -z "$BACKUP_TYPE" ] && {
	echo empty backup type specified
	usage
	exit 3
}

#echo BACKUP_TEST=\$\(echo $BACKUP_TYPE \| $_GREP -E "$VALID_BACKUP_TYPES" \)
BACKUP_TEST=$(echo $BACKUP_TYPE | $_GREP -E "$VALID_BACKUP_TYPES" )

[ -z "$BACKUP_TEST" ] && {
	echo invalid backup type of $BACKUP_TYPE specified
	usage
	exit 4
}

# now set a lock so that only 1 copy of this script can run
scriptLock $CFG_LOCKFILE

# load extra commands specified in template.config
DEBUG=0
setCustomCmds

############################################
## custom commands fully pathed
############################################
echo 
echo ==== Custom Command Setup ====
echo dbca: $_DBCA
echo xclock: $_XCLOCK
echo netmgr: $_NETMGR
echo javac: $_JAVAC
echo runInstaller.sh: $_RUNINSTALLER_SH
echo 

############################################
# Body of script below here
############################################

echo '==== variable settings ===='
echo -o ORACLE_HOME: $ORACLE_HOME
echo -s ORACLE_SID : $ORACLE_SID
echo -b BACKUP_TYPE: $BACKUP_TYPE
echo -d DEBUG      : $DEBUG
echo -v VERBOSE    : $VERBOSE

SLEEPSECONDS=20
echo "do some work here"
echo
echo "sleeping $SLEEPSECONDS seconds - try running another copy of the script"
echo 

sleep $SLEEPSECONDS

scriptUnlock


